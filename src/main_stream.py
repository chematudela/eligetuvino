import streamlit as st 
import pandas as pd 
import numpy as np
import plotly.express as px
import altair as alt
import random
from PIL import Image
import requests
from io import BytesIO
import plotly.colors as pc
from collections import Counter
import matplotlib.pyplot as plt
import seaborn as sns
<<<<<<< Updated upstream
=======
import json
from utils import pagina_principal,eda_1,bodega_perfecta,vino_perfecto,recomendador_vinos,estimacion_valoracion
from country_mapping import country_mapping

#with open('../data/datasets/processed/country_mapping.json', 'r', encoding="utf-8") as f:
    #country_mapping = json.load(f)
>>>>>>> Stashed changes

country_mapping = {
        "Italia": "Italy",
        "Austria": "Austria",
        "Espa√±a": "Spain",
        "Francia": "France",
        "Alemania": "Germany",
        "Sud√°frica": "South Africa",
        "Eslovenia": "Slovenia",
        "Australia": "Australia",
        "Portugal": "Portugal",
        "Argentina": "Argentina",
        "Hungr√≠a": "Hungary",
        "Grecia": "Greece",
        "New Zealand": "New Zealand",
        "Estados Unidos": "United States",
        "Chile": "Chile",
        "Croacia": "Croatia",
        "Ruman√≠a": "Romania",
        "Bulgaria": "Bulgaria",
        "Marruecos": "Morocco",
        "Per√∫": "Peru",
        "Brasil": "Brazil",
        "L√≠bano": "Lebanon",
        "Luxembourg": "Luxembourg",
        "Suiza": "Switzerland",
        "Jap√≥n": "Japan",
        "Georgia": "Georgia",
        "Armenia": "Armenia",
        "Ucrania": "Ukraine",
        "M√©xico": "Mexico",
        "Reino Unido": "United Kingdom",
        "Israel": "Israel",
        "Rep√∫blica Checa": "Czech Republic",
        "Pa√≠ses Bajos": "Netherlands",
        "B√©lgica": "Belgium",
        "Canad√°": "Canada",
        "Chipre": "Cyprus",
        "Norte de Macedonia": "North Macedonia",
        "Polonia": "Poland",
        "Serbia": "Serbia",
        "Eslovaquia": "Slovakia",
        "Uruguay": "Uruguay",
        "China": "China",
        "Moldavia": "Moldova",
        "Dinamarca": "Denmark",
        "Albania": "Albania",
        "Afganist√°n": "Afghanistan",
        "Albania": "Albania",
        "Algeria": "Algeria",
        "Andorra": "Andorra",
        "Angola": "Angola",
        "Antigua y Barbuda": "Antigua and Barbuda",
        "Arabia Saudita": "Saudi Arabia",
        "Argentina": "Argentina",
        "Armenia": "Armenia",
        "Australia": "Australia",
        "Austria": "Austria",
        "Azerbaiy√°n": "Azerbaijan",
        "Bahamas": "Bahamas",
        "Bar√©in": "Bahrain",
        "Banglad√©s": "Bangladesh",
        "Barbados": "Barbados",
        "B√©lgica": "Belgium",
        "Belice": "Belize",
        "Ben√≠n": "Benin",
        "Bhut√°n": "Bhutan",
        "Bielorrusia": "Belarus",
        "Birmania": "Myanmar",
        "Botsuana": "Botswana",
        "Brasil": "Brazil",
        "Brun√©i": "Brunei",
        "Bulgaria": "Bulgaria",
        "Burkina Faso": "Burkina Faso",
        "Burundi": "Burundi",
        "But√°n": "Bhutan",
        "Cabo Verde": "Cape Verde",
        "Camboya": "Cambodia",
        "Camer√∫n": "Cameroon",
        "Canad√°": "Canada",
        "Catar": "Qatar",
        "Chad": "Chad",
        "Chile": "Chile",
        "China": "China",
        "Chipre": "Cyprus",
        "Colombia": "Colombia",
        "Comoras": "Comoros",
        "Congo": "Congo",
        "Corea del Norte": "North Korea",
        "Corea del Sur": "South Korea",
        "Costa Rica": "Costa Rica",
        "Croacia": "Croatia",
        "Cuba": "Cuba",
        "Curazao": "Cura√ßao",
        "Chipre": "Cyprus",
        "Rep√∫blica Checa": "Czech Republic",
        "C√¥te d'Ivoire": "Ivory Coast",
        "Dinamarca": "Denmark",
        "Djibouti": "Djibouti",
        "Dominica": "Dominica",
        "Rep√∫blica Dominicana": "Dominican Republic",
        "Ecuador": "Ecuador",
        "Egipto": "Egypt",
        "El Salvador": "El Salvador",
        "Emiratos √Årabes Unidos": "United Arab Emirates",
        "Ecuador": "Ecuador",
        "Eslovaquia": "Slovakia",
        "Eslovenia": "Slovenia",
        "Espa√±a": "Spain",
        "Estados Unidos": "United States",
        "Etiop√≠a": "Ethiopia",
        "Fiyi": "Fiji",
        "Filipinas": "Philippines",
        "Finlandia": "Finland",
        "Francia": "France",
        "Gabon": "Gabon",
        "Gambia": "Gambia",
        "Georgia": "Georgia",
        "Ghana": "Ghana",
        "Granada": "Grenada",
        "Grecia": "Greece",
        "Guatemala": "Guatemala",
        "Guinea": "Guinea",
        "Guinea-Bis√°u": "Guinea-Bissau",
        "Guyana": "Guyana",
        "Hait√≠": "Haiti",
        "Honduras": "Honduras",
        "Hungr√≠a": "Hungary",
        "India": "India",
        "Indonesia": "Indonesia",
        "Irak": "Iraq",
        "Irlanda": "Ireland",
        "Isla de Man": "Isle of Man",
        "Islas Cook": "Cook Islands",
        "Islas Feroe": "Faroe Islands",
        "Islas Malvinas": "Falkland Islands",
        "Islandia": "Iceland",
        "Israel": "Israel",
        "Italia": "Italy",
        "Jamaica": "Jamaica",
        "Jap√≥n": "Japan",
        "Jordania": "Jordan",
        "Kazajist√°n": "Kazakhstan",
        "Kenia": "Kenya",
        "Kirguist√°n": "Kyrgyzstan",
        "Kiribati": "Kiribati",
        "Kuwait": "Kuwait",
        "Laos": "Laos",
        "Lesoto": "Lesotho",
        "Letonia": "Latvia",
        "L√≠bano": "Lebanon",
        "Liberia": "Liberia",
        "Libia": "Libya",
        "Liechtenstein": "Liechtenstein",
        "Lituania": "Lithuania",
        "Luxemburgo": "Luxembourg",
        "Madagascar": "Madagascar",
        "Malasia": "Malaysia",
        "Malaui": "Malawi",
        "Maldivas": "Maldives",
        "Malta": "Malta",
        "Marruecos": "Morocco",
        "Mauricio": "Mauritius",
        "Mauritania": "Mauritania",
        "M√©xico": "Mexico",
        "Micronesia": "Micronesia",
        "M√≥naco": "Monaco",
        "Mongolia": "Mongolia",
        "Mozambique": "Mozambique",
        "Namibia": "Namibia",
        "Nauru": "Nauru",
        "Nepal": "Nepal",
        "Nicaragua": "Nicaragua",
        "N√≠ger": "Niger",
        "Nigeria": "Nigeria",
        "Noruega": "Norway",
        "Nueva Zelanda": "New Zealand",
        "Om√°n": "Oman",
        "Pa√≠ses Bajos": "Netherlands",
        "Pakist√°n": "Pakistan",
        "Palau": "Palau",
        "Panam√°": "Panama",
        "Pap√∫a Nueva Guinea": "Papua New Guinea",
        "Paraguay": "Paraguay",
        "Per√∫": "Peru",
        "Polonia": "Poland",
        "Portugal": "Portugal",
        "Reino Unido": "United Kingdom",
        "Rep√∫blica Checa": "Czech Republic",
        "Ruman√≠a": "Romania",
        "Rusia": "Russia",
        "Ruanda": "Rwanda",
        "Sahara Occidental": "Western Sahara",
        "Samoa": "Samoa",
        "San Crist√≥bal y Nieves": "Saint Kitts and Nevis",
        "San Marino": "San Marino",
        "Santa Luc√≠a": "Saint Lucia",
        "Senegal": "Senegal",
        "Serbia": "Serbia",
        "Seychelles": "Seychelles",
        "Sierra Leona": "Sierra Leone",
        "Singapur": "Singapore",
        "Siria": "Syria",
        "Somalia": "Somalia",
        "Sri Lanka": "Sri Lanka",
        "Suazilandia": "Eswatini",
        "Sud√°n": "Sudan",
        "Sud√°frica": "South Africa",
        "Suecia": "Sweden",
        "Suiza": "Switzerland",
        "Surinam": "Suriname",
        "Siria": "Syria",
        "Somalia": "Somalia",
        "Sri Lanka": "Sri Lanka",
        "Tailandia": "Thailand",
        "Tanzania": "Tanzania",
        "Togo": "Togo",
        "Trinidad y Tobago": "Trinidad and Tobago",
        "T√∫nez": "Tunisia",
        "Turkmenist√°n": "Turkmenistan",
        "Turqu√≠a": "Turkey",
        "Tuvalu": "Tuvalu",
        "Uganda": "Uganda",
        "Ucrania": "Ukraine",
        "Uruguay": "Uruguay",
        "Uzbekist√°n": "Uzbekistan",
        "Vanuatu": "Vanuatu",
        "Vaticano": "Vatican",
        "Venezuela": "Venezuela",
        "Vietnam": "Vietnam",
        "Yemen": "Yemen",
        "Zambia": "Zambia",
        "Zimbabue": "Zimbabwe"
    }

st.set_page_config(
    page_title="Dashboard sobre vino mundial",
    page_icon="üç∑",
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")

def pagina_principal():
    def cargar_frases():
            try:
                with open("frases.txt", "r", encoding="utf-8") as file:
                    frases = file.readlines()
                return [frase.strip() for frase in frases if frase.strip()]
            except FileNotFoundError:
                return ["No se encontraron frases sobre vino."]

    frases = cargar_frases()

    if "mostrar_analisis" not in st.session_state:
            st.session_state.mostrar_analisis = False

        # Inicializar una frase aleatoria en session_state
    if "frase_actual" not in st.session_state:
            st.session_state.frase_actual = random.choice(frases)

        # Funci√≥n para cambiar la frase
    def cambiar_frase():
        st.session_state.frase_actual = random.choice(frases)
    # Cargar la imagen desde la URL
    url = "https://ebootcamp.net/wp-content/uploads/2021/11/4Geeks-Academy.jpeg"
    response = requests.get(url)
    img = Image.open(BytesIO(response.content))

# Redimensionar la imagen
    img = img.resize((100, 100))
    header_html = f"""
    <div style="text-align: center; background-color: #800000; padding: 20px; border-radius: 15px; margin: 20px;">
        <img src="{url}" width="100" height="100" style="display: block; float: right;">
        <p style="font-family: 'Playball', cursive; font-size: 35px; color: #b1dbde;">
            Proyecto de Data Science - 4Geeks <br> Anal√≠tica sobre vino mundial
        </p>   <p class="frase">{st.session_state.frase_actual}</p>            
    </div>
"""
    st.markdown(header_html, unsafe_allow_html=True)
 
    st.markdown(
            """
            <style>
            .styled-table {
                width: 50%;
                margin: auto;
                border-collapse: collapse;
            }
            .styled-table th {
                background-color: #800000;
                color: white;
                text-align: center;
                font-size: 20px;
                padding: 10px;
            }
            .styled-table td {
                text-align: center;
                padding: 8px;
                font-size: 18px;
            }
            </style>
            """,
            unsafe_allow_html=True
        )

    integrantes = pd.DataFrame({
            "Integrantes": ["Pauline Charvin", "Jose Mar√≠a Tudela", "Vicente Polo"]
        })

    st.markdown("<table class='styled-table'><tr><th>Nuestro proyecto de Data Science</th></tr>" +
                    "".join(f"<tr><td>{nombre}</td></tr>" for nombre in integrantes["Integrantes"]) +
                    "</table>", unsafe_allow_html=True)

    st.write("")

        # Segunda tabla con tecnolog√≠as usadas
    tecnologias = pd.DataFrame({
            "Tecnolog√≠a": ["Tama√±o del Dataset", "Uso de Web Scraping", "Integridad de datos"],
            "Descripci√≥n": ["32,000 vinos (espumosos, blancos, tintos)",
                            "BeautifulSoup y Selenium",
                            "NLP y KNN"]
        })

    st.markdown("### Tecnolog√≠as utilizadas")
    st.table(tecnologias.set_index("Tecnolog√≠a")) 

    librerias = pd.DataFrame({
    "Librer√≠a": [
        "Streamlit", 
        "Pandas", 
        "Plotly Express", 
        "Altair", 
        "Random", 
        "PIL (Pillow)", 
        "Requests", 
        "BytesIO", 
        "Plotly Colors", 
        "Matplotlib", 
        "Seaborn"
    ],
    "Descripci√≥n": [
        "Framework para crear aplicaciones web interactivas.",
        "Librer√≠a para manejo y an√°lisis de datos en estructuras tabulares.",
        "Librer√≠a para crear gr√°ficos interactivos y visualizaciones.",
        "Librer√≠a para crear gr√°ficos declarativos.",
        "Genera n√∫meros aleatorios y realiza selecciones al azar.",
        "Librer√≠a para abrir, manipular y guardar im√°genes.",
        "Permite hacer peticiones HTTP y obtener datos de la web.",
        "M√≥dulo para trabajar con flujos de datos binarios (como im√°genes).",
        "Proporciona una paleta de colores para visualizaciones en Plotly.",
        "Librer√≠a para la creaci√≥n de gr√°ficos est√°ticos.",
        "Librer√≠a para visualizaci√≥n de datos estad√≠sticos y gr√°ficos atractivos."
    ]
})

# Mostrar el t√≠tulo
    st.markdown("### Librer√≠as utilizadas")
    st.table(librerias.set_index("Librer√≠a"))

def eda_1():
    st.title("üìä Primera parte del EDA")

    # Crear el desplegable para seleccionar el tipo de vino
    vino_tipo = st.selectbox(
        "Selecciona el tipo de vino",
        ("Vino Tinto", "Vino Blanco", "Vino Espumoso")
    )

# Definir las rutas de los archivos CSV seg√∫n el tipo de vino seleccionado
    # Definir las rutas de los archivos CSV seg√∫n el tipo de vino seleccionado
    if vino_tipo == "Vino Tinto":
        archivo_csv = r'C:\Users\yiyip\OneDrive\Documents\GitHub\Proyecto_grupo2_vinos\csv\tintos.csv'  
    elif vino_tipo == "Vino Blanco":
        archivo_csv = r"C:\Users\yiyip\OneDrive\Documents\GitHub\Proyecto_grupo2_vinos\csv\blancos.csv"  
    else:
        archivo_csv = r"C:\Users\yiyip\OneDrive\Documents\GitHub\Proyecto_grupo2_vinos\csv\espumosos.csv"  
# Cargar el CSV seleccionado en el DataFrame df
    df = pd.read_csv(archivo_csv)    
    
    df["Pa√≠s"] = df["Pa√≠s"].replace(country_mapping)

    # Grouping data by number of wines
    df_grouped_1 = df.groupby("Pa√≠s")["ID"].nunique().reset_index(name="num_vinos")
    
    # Columna para el gr√°fico
    col1, col2 = st.columns([2, 2])  # Controlamos el tama√±o de las columnas
    
    with col1:
        st.subheader("Distribuci√≥n de vinos por pa√≠s")
        country_count = df['Pa√≠s'].value_counts().reset_index()
        country_count.columns = ['Pa√≠s', 'Cantidad']
        total_vinos = country_count['Cantidad'].sum()
        country_count['Porcentaje'] = (country_count['Cantidad'] / total_vinos) * 100
        
        pie_chart = alt.Chart(country_count).mark_arc().encode(
            theta='Cantidad:Q',  # El tama√±o de cada secci√≥n
            color=alt.Color('Pa√≠s:N', legend=None),  # Color por pa√≠s
            tooltip=['Pa√≠s:N', 'Cantidad:Q', 'Porcentaje:Q'],  # Mostrar el pa√≠s, la cantidad y el porcentaje en el tooltip
            text=alt.Text('Porcentaje:Q', format='.1f')  # Mostrar el porcentaje en cada secci√≥n
        ).properties(width=350, height=300)  # Ajusta el tama√±o del gr√°fico

        pie_chart = pie_chart.configure_mark(
            fontSize=14,  # Tama√±o de la fuente
            fontWeight='bold'
        )
        st.altair_chart(pie_chart, use_container_width=True)

    with col2:
        # Columna para la tabla
        st.subheader("üîù Top 10 pa√≠ses con m√°s vinos registrados")
        # Top 10 pa√≠ses con m√°s vinos
        df_top_10 = df_grouped_1.sort_values(by="num_vinos", ascending=False).head(10)
        st.table(df_top_10.set_index("Pa√≠s"))
        pass


    # Agrupar los datos por pa√≠s y bodega, contando el n√∫mero de vinos por combinaci√≥n
    df_grouped_1 = df.groupby(["Pa√≠s", "Bodega"])["ID"].nunique().reset_index(name="num_vinos")

    # Crear las columnas para el layout
    col1, col2 = st.columns([2, 2])  # Controlamos el tama√±o de las columnas

    country_bodega_count = df.groupby(["Pa√≠s", "Bodega"])["ID"].nunique().reset_index(name="Cantidad")
    total_vinos = country_bodega_count['Cantidad'].sum()
    country_bodega_count['Porcentaje'] = (country_bodega_count['Cantidad'] / total_vinos) * 100

    with col1:
        country_bodega_count_grouped = country_bodega_count.groupby("Pa√≠s")["Cantidad"].count().reset_index(name="num_bodegas")
        countries_with_more_than_20_bodegas = country_bodega_count_grouped[country_bodega_count_grouped['num_bodegas'] > 20]['Pa√≠s']
        filtered_data = country_bodega_count[country_bodega_count['Pa√≠s'].isin(countries_with_more_than_20_bodegas)]

        # Gr√°fico de barras apiladas
        bar_chart = alt.Chart(filtered_data).mark_bar().encode(
            x='Cantidad:Q',  # Longitud de las barras
            y=alt.Y('Pa√≠s:N', sort='-x'),  # Pa√≠ses, ordenados por la cantidad
            color=alt.Color('Bodega:N', legend=None),  # Colores por bodega sin leyenda
            tooltip=['Pa√≠s:N', 'Bodega:N', 'Cantidad:Q', 'Porcentaje:Q']  # Informaci√≥n mostrada al pasar el rat√≥n
        ).properties(width=600, height=400)

        # Ajusta el dise√±o de la gr√°fica (opcional)
        bar_chart = bar_chart.configure_mark(
            fontSize=14,  # Tama√±o de la fuente
            fontWeight='bold'
        )

        # Mostrar el gr√°fico en Streamlit
        st.altair_chart(bar_chart, use_container_width=True)

        
    with col2:
        # Columna para la tabla
        st.subheader("üîù Top 10 combinaciones de pa√≠s y bodega con m√°s vinos registrados")
        
        # Top 10 combinaciones de pa√≠s y bodega con m√°s vinos
        df_top_10 = df_grouped_1.sort_values(by="num_vinos", ascending=False).head(10)
        st.table(df_top_10.set_index(["Pa√≠s", "Bodega"]))

    
    # Primero, agrupar los datos y calcular el n√∫mero de bodegas por pa√≠s
    df_grouped_1 = df.groupby("Pa√≠s")["Bodega"].nunique().reset_index(name="num_bodegas")

    # Obtener los 10 pa√≠ses con m√°s bodegas
    df_top_10 = df_grouped_1.sort_values(by="num_bodegas", ascending=False).head(10)

    # Crear las columnas para los gr√°ficos
    col1, col2 = st.columns([2, 2])  # Controlamos el tama√±o de las columnas
    
    # Graficar el Top 10 pa√≠ses con m√°s bodegas registradas
    with col1: 
        fig = px.bar(df_top_10, 
                    x='Pa√≠s', 
                    y='num_bodegas', 
                    color='num_bodegas', 
                    title="üè¢ Top 10 pa√≠ses con m√°s bodegas registradas",
                    labels={'num_bodegas': 'N√∫mero de Bodegas', 'Pa√≠s': 'Pa√≠s'},
                    color_continuous_scale='Viridis')  # Puedes cambiar el color_continuous_scale a tu preferencia

        # Mostrar el gr√°fico en Streamlit
        st.plotly_chart(fig, use_container_width=True)

    # Mostrar la tabla con los 10 pa√≠ses con m√°s bodegas
    with col2: 
        st.subheader("üè¢ Top 10 pa√≠ses con m√°s bodegas registradas")
        st.table(df_top_10.set_index("Pa√≠s"))


    # Average wine rating per country
    df['Valoraci√≥n'] = pd.to_numeric(df['Valoraci√≥n'], errors='coerce')
    df_grouped_2 = df.groupby("Pa√≠s").agg(
    num_bodegas=('Bodega', 'nunique'),  # Contamos el n√∫mero √∫nico de bodegas
    avg_valoracion=('Valoraci√≥n', 'mean')  # Calculamos la valoraci√≥n promedio
).reset_index()

    with col1: 
        fig4 = px.scatter(df_grouped_2, 
                        x="num_bodegas",  # N√∫mero de bodegas
                        y="avg_valoracion",  # Valoraci√≥n promedio
                        color="avg_valoracion",  # Colorear seg√∫n la valoraci√≥n
                        hover_name="Pa√≠s",  # Muestra el pa√≠s al pasar el rat√≥n
                        title=f"Relaci√≥n entre el N√∫mero de Bodegas y la Valoraci√≥n Promedio de {vino_tipo}",
                        labels={'avg_valoracion': 'Valoraci√≥n Promedio', 'num_bodegas': 'N√∫mero de Bodegas'},
                        color_continuous_scale="RdYlGn")  # Color seg√∫n la valoraci√≥n

        st.plotly_chart(fig4, use_container_width=True)

    # Top 10 pa√≠ses con mejor valoraci√≥n promedio
    with col2:
        df_top_10_valoracion = df_grouped_2.sort_values(by="avg_valoracion", ascending=False).head(10)
        st.subheader("‚≠ê Top 10 pa√≠ses con la mejor valoraci√≥n promedio de vinos")
        st.table(df_top_10_valoracion.set_index("Pa√≠s"))

    # Wine price by country
    df['Precio'] = pd.to_numeric(df['Precio'], errors='coerce')
    df_grouped_3 = df.groupby("Pa√≠s")["Precio"].mean().reset_index(name="avg_precio")

    # Create the choropleth map for average price
    fig3 = px.choropleth(df_grouped_3, 
                        locations="Pa√≠s",  
                        locationmode="country names",  
                        color="avg_precio",  
                        hover_name="Pa√≠s",  
                        color_continuous_scale="Viridis",  
                        labels={"avg_precio": "Precio Promedio"})  

    # Adjust map layout
    fig3.update_geos(showcoastlines=True, coastlinecolor="Black", showland=True, landcolor="white")
    fig3.update_layout(title=f"Precio Promedio de {vino_tipo} por Pa√≠s", geo=dict(showframe=False, projection_type="natural earth"))

    # Display the map in Streamlit
    st.plotly_chart(fig3, use_container_width=True)

    # Top 10 countries with the highest average price
    df_top_10_precio = df_grouped_3.sort_values(by="avg_precio", ascending=False).head(10)
    st.subheader(f"üí∞ Top 10 pa√≠ses con mayor precio promedio de {vino_tipo}")
    st.table(df_top_10_precio.set_index("Pa√≠s"))


def bodega_perfecta():

    st.title("Datos para una bodega perfecta")
       
    # Crear el desplegable para seleccionar el tipo de vino
    vino_tipo = st.selectbox(
        "Selecciona el tipo de vino",
        ("Vino Tinto", "Vino Blanco", "Vino Espumoso")
    )

# Definir las rutas de los archivos CSV seg√∫n el tipo de vino seleccionado
    if vino_tipo == "Vino Tinto":
        archivo_csv = r'C:\Users\yiyip\OneDrive\Documents\GitHub\Proyecto_grupo2_vinos\csv\tintos.csv'  
    elif vino_tipo == "Vino Blanco":
        archivo_csv = r"C:\Users\yiyip\OneDrive\Documents\GitHub\Proyecto_grupo2_vinos\csv\blancos.csv"  
    else:
        archivo_csv = r"C:\Users\yiyip\OneDrive\Documents\GitHub\Proyecto_grupo2_vinos\csv\espumosos.csv"  

    # Cargar el CSV seleccionado en el DataFrame df
    df = pd.read_csv(archivo_csv)

    # Crear columnas
    tab1, tab2 = st.columns(2)

    # Gr√°fico 1: Heatmap
    with tab1:
        st.subheader("Heatmap de Valoraciones")
        heatmap = alt.Chart(df).mark_rect().encode(
            x=alt.X('A√±o:O', title="A√±o"),
            y=alt.Y('Pa√≠s:O', title="Pa√≠s"),
            color=alt.Color('Valoraci√≥n:Q', scale=alt.Scale(scheme='reds'))
        ).properties(width=400, height=300)
        st.altair_chart(heatmap, use_container_width=True)

    # Gr√°fico 2: Precio medio por tipo de uva
    with tab2:
        st.subheader("Precio medio por tipo de uva")
        bar_chart = alt.Chart(df).mark_bar().encode(
            x=alt.X('mean(Precio):Q', title="Precio Medio"),
            y=alt.Y('Uva:N', title="Tipo de Uva", sort='-x'),
            color=alt.Color('Uva:N', legend=None)
        ).properties(width=400, height=300)
        st.altair_chart(bar_chart, use_container_width=True)

    # Gr√°fico 3: Proporci√≥n de vinos por pa√≠s
    with tab1:
        st.subheader("Distribuci√≥n de vinos por pa√≠s")
        country_count = df['Pa√≠s'].value_counts().reset_index()
        country_count.columns = ['Pa√≠s', 'Cantidad']
        pie_chart = alt.Chart(country_count).mark_arc().encode(
            theta='Cantidad:Q',
            color=alt.Color('Pa√≠s:N', legend=None)
        ).properties(width=400, height=300)
        st.altair_chart(pie_chart, use_container_width=True)

def img_process():
    st.title("Subir y mostrar imagen")

    # Widget para subir la imagen
    uploaded_file = st.file_uploader("Sube una etiqueta de vino DE FRENTE", type=["png", "jpg", "jpeg"])

    # Si se sube una imagen, se muestra en pantalla
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        delantera = image.resize((200, 200))

        # Mostrar la imagen redimensionada y centrada
        st.image(delantera, caption="Etiqueta delantera de vino subida", use_container_width=False)
    
    uploaded_file = st.file_uploader("Sube una etiqueta de vino TRASERA", type=["png", "jpg", "jpeg"])

    # Si se sube una imagen, se muestra en pantalla
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        trasera = image.resize((200, 200))

        # Mostrar la imagen redimensionada y centrada
        st.image(trasera, caption="Etiqueta trasera de vino subida", use_container_width=False)

    precio = st.text_input("¬øCu√°l es el precio del vino?")

    # Mostrar el precio ingresado
    if precio:
        try:
            precio_float = float(precio)  # Convertir el precio a float
            st.write(f"El precio ingresado es: ${precio_float:.2f}")
        except ValueError:
            st.error("Por favor, ingresa un valor num√©rico v√°lido para el precio.")
    

def vino_perfecto():
    st.title("Caracter√≠sticas del vino perfecto")
    
    # Bot√≥n para subir el archivo CSV
    uploaded_file = st.file_uploader("Elige un archivo CSV", type="csv")

    # Verificar si se ha subido un archivo
    if uploaded_file is not None:
        # Leer el archivo CSV en un DataFrame
        df = pd.read_csv(uploaded_file)
        
        st.write("Gr√°ficos de dispersi√≥n sobre caracter√≠sticas de sabor")

        # Definir caracter√≠sticas sensoriales
        features = ['Ligero/Poderoso', 'Suave/T√°nico', 'Seco/Dulce', 'D√©bil/√Åcido']

        # Ordenar el DataFrame por valoraci√≥n y tomar los 50 mejores vinos
        top_50_vinos = df.sort_values(by='Valoraci√≥n', ascending=False).head(50)

        # Calcular los valores promedio de las caracter√≠sticas en los 50 mejores vinos
        mean_values = top_50_vinos[features].mean()

        # Graficar la relaci√≥n entre cada caracter√≠stica y la valoraci√≥n
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        axes = axes.flatten()

        for i, feature in enumerate(features):
            sns.scatterplot(data=df, x=feature, y='Valoraci√≥n', alpha=0.5, ax=axes[i], label="Todos los vinos")
            sns.scatterplot(data=top_50_vinos, x=feature, y='Valoraci√≥n', color='red', ax=axes[i], label="Top 50 vinos")
            axes[i].set_title(f'Valoraci√≥n vs {feature}')
            axes[i].set_xlabel(feature)
            axes[i].set_ylabel('Valoraci√≥n')

        plt.tight_layout()
        st.pyplot(fig)

        # Mostrar los valores en la aplicaci√≥n
        st.write("**Valores promedio en los 50 vinos mejor valorados:**")
        for feature, value in mean_values.items():
            st.write(f"- {feature}: {value:.2f}")
        
    
    st.title("üç∑ Caracter√≠sticas promedio de los 100 vinos mejor valorados")

    # Tomar los 100 mejores vinos seg√∫n la valoraci√≥n
    top_100_vinos = df.sort_values(by='Valoraci√≥n', ascending=False).head(100)
    # Caracter√≠sticas a analizar
    features = ['Ligero/Poderoso', 'Suave/T√°nico', 'Seco/Dulce', 'D√©bil/√Åcido']

    # Calcular la media de cada caracter√≠stica
    media_caracteristicas = top_100_vinos[features].mean()

    # Convertir valores en lista
    values = media_caracteristicas.tolist()

    # Nombres de las caracter√≠sticas
    labels = features

        # N√∫mero de variables (lados del gr√°fico)
    num_vars = len(labels)

        # √Ångulos para el gr√°fico de ara√±a
    angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()

        # Cerrar el gr√°fico de ara√±a
    values += values[:1]
    angles += angles[:1]

        # Crear la figura y los ejes en modo polar
    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))

        # Dibujar el gr√°fico con colores de vino
    ax.fill(angles, values, color='#8B0000', alpha=0.4)  # Relleno color vino tinto (granate)
    ax.plot(angles, values, color='#4B0000', linewidth=2)  # Bordes m√°s oscuros (burdeos)

        # Agregar etiquetas con los valores
    for i, value in enumerate(values[:-1]):
        ax.text(angles[i], value + 0.2, f"{value:.2f}", ha='center', fontsize=10, fontweight='bold', color='#4B0000')

        # Ajustar los labels y los ticks
    ax.set_yticklabels([])  # No mostrar etiquetas en el eje radial
    ax.set_xticks(angles[:-1])  # No incluir el √∫ltimo √°ngulo porque lo hemos duplicado
    ax.set_xticklabels(labels, fontsize=12, fontweight='bold', color='#8B0000')

        # T√≠tulo del gr√°fico
    ax.set_title('üç∑ Caracter√≠sticas promedio de los 100 vinos mejor valorados', size=15, color='#4B0000', y=1.1)

        # Mostrar en Streamlit
    st.pyplot(fig)

    st.title("üçá Correlaci√≥n entre Tipos de Uva y Valoraci√≥n")

    # Lista de columnas de tipos de uva
    uva_columns = ['Aglianico', 'Barbera', 'Blaufr√§nkisch', 'CabernetFranc', 'CabernetSauvignon', 'Carignan',
                       'Cari√±ena', 'Corvina', 'Corvinone', 'Gamay', 'Garnacha', 'Graciano', 'Grenache', 'Malbec',
                       'Mencia', 'Merlot', 'Monastrell', 'Montepulciano', 'Mourvedre', 'Nebbiolo', 'NerelloMascalese',
                       "Nerod'Avola", 'PetitVerdot', 'PinotNero', 'PinotNoir', 'Primitivo', 'Rondinella', 'Sangiovese',
                       'Shiraz/Syrah', 'Tempranillo', 'TourigaNacional', 'Zweigelt']

        # Asegurar que las columnas son num√©ricas
    df[uva_columns] = df[uva_columns].apply(pd.to_numeric, errors='coerce', downcast='integer')

        # Calcular la correlaci√≥n con la valoraci√≥n
    correlaciones = df[uva_columns].corrwith(df['Valoraci√≥n']).sort_values(ascending=False)

    tab1, tab2 = st.columns(2)

    with tab1:    # Obtener las 10 mejores correlaciones
        top_10_correlaciones = correlaciones.head(10)
    # Mostrar las 10 mejores correlaciones en la app
        st.write(top_10_correlaciones)
    with tab2:
    # Crear el gr√°fico de barras
        fig, ax = plt.subplots(figsize=(12, 6))
        sns.barplot(x=top_10_correlaciones.index, y=top_10_correlaciones.values, palette='magma', ax=ax)

        # Personalizaci√≥n del gr√°fico
        ax.set_title('üç∑ Correlaci√≥n entre Tipos de Uva y Valoraci√≥n', fontsize=16)
        ax.set_xlabel('Tipo de Uva', fontsize=14)
        ax.set_ylabel('Correlaci√≥n con Valoraci√≥n', fontsize=14)
        ax.set_xticklabels(top_10_correlaciones.index, rotation=45, ha='right')

        # Mostrar gr√°fico en Streamlit
        st.pyplot(fig)





def recomendador_de_vinos():
    st.title("Recomendador de vinos")
    

st.sidebar.title("Navegaci√≥n")
pagina= st.sidebar.selectbox("Selecciona una p√°gina", ["P√°gina principal", "EDA 1", "Bodega Perfecta","Vino perfecto","Procesado de imagen", "Recomendador de vinos"])

if pagina == "P√°gina principal":
    pagina_principal()
elif pagina == "EDA 1":
    eda_1()
elif pagina == "Bodega Perfecta":
    bodega_perfecta()
elif pagina == "Vino perfecto":
    vino_perfecto()
elif pagina == "Procesado de imagen":
    img_process()
elif pagina == "Recomendador de vinos":
    recomendador_de_vinos()